"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_json1_1StopPHIDetectionJobCommand = exports.deserializeAws_json1_1StopICD10CMInferenceJobCommand = exports.deserializeAws_json1_1StopEntitiesDetectionV2JobCommand = exports.deserializeAws_json1_1StartSNOMEDCTInferenceJobCommand = exports.deserializeAws_json1_1StartRxNormInferenceJobCommand = exports.deserializeAws_json1_1StartPHIDetectionJobCommand = exports.deserializeAws_json1_1StartICD10CMInferenceJobCommand = exports.deserializeAws_json1_1StartEntitiesDetectionV2JobCommand = exports.deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = exports.deserializeAws_json1_1ListRxNormInferenceJobsCommand = exports.deserializeAws_json1_1ListPHIDetectionJobsCommand = exports.deserializeAws_json1_1ListICD10CMInferenceJobsCommand = exports.deserializeAws_json1_1ListEntitiesDetectionV2JobsCommand = exports.deserializeAws_json1_1InferSNOMEDCTCommand = exports.deserializeAws_json1_1InferRxNormCommand = exports.deserializeAws_json1_1InferICD10CMCommand = exports.deserializeAws_json1_1DetectPHICommand = exports.deserializeAws_json1_1DetectEntitiesV2Command = exports.deserializeAws_json1_1DetectEntitiesCommand = exports.deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = exports.deserializeAws_json1_1DescribeRxNormInferenceJobCommand = exports.deserializeAws_json1_1DescribePHIDetectionJobCommand = exports.deserializeAws_json1_1DescribeICD10CMInferenceJobCommand = exports.deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = exports.serializeAws_json1_1StopSNOMEDCTInferenceJobCommand = exports.serializeAws_json1_1StopRxNormInferenceJobCommand = exports.serializeAws_json1_1StopPHIDetectionJobCommand = exports.serializeAws_json1_1StopICD10CMInferenceJobCommand = exports.serializeAws_json1_1StopEntitiesDetectionV2JobCommand = exports.serializeAws_json1_1StartSNOMEDCTInferenceJobCommand = exports.serializeAws_json1_1StartRxNormInferenceJobCommand = exports.serializeAws_json1_1StartPHIDetectionJobCommand = exports.serializeAws_json1_1StartICD10CMInferenceJobCommand = exports.serializeAws_json1_1StartEntitiesDetectionV2JobCommand = exports.serializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = exports.serializeAws_json1_1ListRxNormInferenceJobsCommand = exports.serializeAws_json1_1ListPHIDetectionJobsCommand = exports.serializeAws_json1_1ListICD10CMInferenceJobsCommand = exports.serializeAws_json1_1ListEntitiesDetectionV2JobsCommand = exports.serializeAws_json1_1InferSNOMEDCTCommand = exports.serializeAws_json1_1InferRxNormCommand = exports.serializeAws_json1_1InferICD10CMCommand = exports.serializeAws_json1_1DetectPHICommand = exports.serializeAws_json1_1DetectEntitiesV2Command = exports.serializeAws_json1_1DetectEntitiesCommand = exports.serializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = exports.serializeAws_json1_1DescribeRxNormInferenceJobCommand = exports.serializeAws_json1_1DescribePHIDetectionJobCommand = exports.serializeAws_json1_1DescribeICD10CMInferenceJobCommand = exports.serializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = void 0;
exports.deserializeAws_json1_1StopSNOMEDCTInferenceJobCommand = exports.deserializeAws_json1_1StopRxNormInferenceJobCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const uuid_1 = require("uuid");
const ComprehendMedicalServiceException_1 = require("../models/ComprehendMedicalServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeEntitiesDetectionV2JobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = serializeAws_json1_1DescribeEntitiesDetectionV2JobCommand;
const serializeAws_json1_1DescribeICD10CMInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DescribeICD10CMInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeICD10CMInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeICD10CMInferenceJobCommand = serializeAws_json1_1DescribeICD10CMInferenceJobCommand;
const serializeAws_json1_1DescribePHIDetectionJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DescribePHIDetectionJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribePHIDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribePHIDetectionJobCommand = serializeAws_json1_1DescribePHIDetectionJobCommand;
const serializeAws_json1_1DescribeRxNormInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DescribeRxNormInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeRxNormInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeRxNormInferenceJobCommand = serializeAws_json1_1DescribeRxNormInferenceJobCommand;
const serializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DescribeSNOMEDCTInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeSNOMEDCTInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = serializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand;
const serializeAws_json1_1DetectEntitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DetectEntities",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectEntitiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DetectEntitiesCommand = serializeAws_json1_1DetectEntitiesCommand;
const serializeAws_json1_1DetectEntitiesV2Command = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DetectEntitiesV2",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectEntitiesV2Request(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DetectEntitiesV2Command = serializeAws_json1_1DetectEntitiesV2Command;
const serializeAws_json1_1DetectPHICommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.DetectPHI",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DetectPHIRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1DetectPHICommand = serializeAws_json1_1DetectPHICommand;
const serializeAws_json1_1InferICD10CMCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.InferICD10CM",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1InferICD10CMRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1InferICD10CMCommand = serializeAws_json1_1InferICD10CMCommand;
const serializeAws_json1_1InferRxNormCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.InferRxNorm",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1InferRxNormRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1InferRxNormCommand = serializeAws_json1_1InferRxNormCommand;
const serializeAws_json1_1InferSNOMEDCTCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.InferSNOMEDCT",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1InferSNOMEDCTRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1InferSNOMEDCTCommand = serializeAws_json1_1InferSNOMEDCTCommand;
const serializeAws_json1_1ListEntitiesDetectionV2JobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListEntitiesDetectionV2JobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListEntitiesDetectionV2JobsCommand = serializeAws_json1_1ListEntitiesDetectionV2JobsCommand;
const serializeAws_json1_1ListICD10CMInferenceJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.ListICD10CMInferenceJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListICD10CMInferenceJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListICD10CMInferenceJobsCommand = serializeAws_json1_1ListICD10CMInferenceJobsCommand;
const serializeAws_json1_1ListPHIDetectionJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.ListPHIDetectionJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListPHIDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListPHIDetectionJobsCommand = serializeAws_json1_1ListPHIDetectionJobsCommand;
const serializeAws_json1_1ListRxNormInferenceJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.ListRxNormInferenceJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListRxNormInferenceJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListRxNormInferenceJobsCommand = serializeAws_json1_1ListRxNormInferenceJobsCommand;
const serializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.ListSNOMEDCTInferenceJobs",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSNOMEDCTInferenceJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = serializeAws_json1_1ListSNOMEDCTInferenceJobsCommand;
const serializeAws_json1_1StartEntitiesDetectionV2JobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StartEntitiesDetectionV2Job",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartEntitiesDetectionV2JobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartEntitiesDetectionV2JobCommand = serializeAws_json1_1StartEntitiesDetectionV2JobCommand;
const serializeAws_json1_1StartICD10CMInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StartICD10CMInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartICD10CMInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartICD10CMInferenceJobCommand = serializeAws_json1_1StartICD10CMInferenceJobCommand;
const serializeAws_json1_1StartPHIDetectionJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StartPHIDetectionJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartPHIDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartPHIDetectionJobCommand = serializeAws_json1_1StartPHIDetectionJobCommand;
const serializeAws_json1_1StartRxNormInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StartRxNormInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartRxNormInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartRxNormInferenceJobCommand = serializeAws_json1_1StartRxNormInferenceJobCommand;
const serializeAws_json1_1StartSNOMEDCTInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StartSNOMEDCTInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartSNOMEDCTInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StartSNOMEDCTInferenceJobCommand = serializeAws_json1_1StartSNOMEDCTInferenceJobCommand;
const serializeAws_json1_1StopEntitiesDetectionV2JobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StopEntitiesDetectionV2Job",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopEntitiesDetectionV2JobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopEntitiesDetectionV2JobCommand = serializeAws_json1_1StopEntitiesDetectionV2JobCommand;
const serializeAws_json1_1StopICD10CMInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StopICD10CMInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopICD10CMInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopICD10CMInferenceJobCommand = serializeAws_json1_1StopICD10CMInferenceJobCommand;
const serializeAws_json1_1StopPHIDetectionJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StopPHIDetectionJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopPHIDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopPHIDetectionJobCommand = serializeAws_json1_1StopPHIDetectionJobCommand;
const serializeAws_json1_1StopRxNormInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StopRxNormInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopRxNormInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopRxNormInferenceJobCommand = serializeAws_json1_1StopRxNormInferenceJobCommand;
const serializeAws_json1_1StopSNOMEDCTInferenceJobCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "ComprehendMedical_20181030.StopSNOMEDCTInferenceJob",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopSNOMEDCTInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_json1_1StopSNOMEDCTInferenceJobCommand = serializeAws_json1_1StopSNOMEDCTInferenceJobCommand;
const deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeEntitiesDetectionV2JobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommand;
const deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeICD10CMInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeICD10CMInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeICD10CMInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeICD10CMInferenceJobCommand = deserializeAws_json1_1DescribeICD10CMInferenceJobCommand;
const deserializeAws_json1_1DescribeICD10CMInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribePHIDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribePHIDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribePHIDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribePHIDetectionJobCommand = deserializeAws_json1_1DescribePHIDetectionJobCommand;
const deserializeAws_json1_1DescribePHIDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeRxNormInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeRxNormInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeRxNormInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeRxNormInferenceJobCommand = deserializeAws_json1_1DescribeRxNormInferenceJobCommand;
const deserializeAws_json1_1DescribeRxNormInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeSNOMEDCTInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand;
const deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DetectEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DetectEntitiesCommand = deserializeAws_json1_1DetectEntitiesCommand;
const deserializeAws_json1_1DetectEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DetectEntitiesV2Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectEntitiesV2CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectEntitiesV2Response(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DetectEntitiesV2Command = deserializeAws_json1_1DetectEntitiesV2Command;
const deserializeAws_json1_1DetectEntitiesV2CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1DetectPHICommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DetectPHICommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DetectPHIResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1DetectPHICommand = deserializeAws_json1_1DetectPHICommand;
const deserializeAws_json1_1DetectPHICommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1InferICD10CMCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1InferICD10CMCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1InferICD10CMResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1InferICD10CMCommand = deserializeAws_json1_1InferICD10CMCommand;
const deserializeAws_json1_1InferICD10CMCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1InferRxNormCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1InferRxNormCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1InferRxNormResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1InferRxNormCommand = deserializeAws_json1_1InferRxNormCommand;
const deserializeAws_json1_1InferRxNormCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1InferSNOMEDCTCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1InferSNOMEDCTCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1InferSNOMEDCTResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1InferSNOMEDCTCommand = deserializeAws_json1_1InferSNOMEDCTCommand;
const deserializeAws_json1_1InferSNOMEDCTCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1ListEntitiesDetectionV2JobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListEntitiesDetectionV2JobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListEntitiesDetectionV2JobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListEntitiesDetectionV2JobsCommand = deserializeAws_json1_1ListEntitiesDetectionV2JobsCommand;
const deserializeAws_json1_1ListEntitiesDetectionV2JobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1ListICD10CMInferenceJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListICD10CMInferenceJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListICD10CMInferenceJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListICD10CMInferenceJobsCommand = deserializeAws_json1_1ListICD10CMInferenceJobsCommand;
const deserializeAws_json1_1ListICD10CMInferenceJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1ListPHIDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListPHIDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListPHIDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListPHIDetectionJobsCommand = deserializeAws_json1_1ListPHIDetectionJobsCommand;
const deserializeAws_json1_1ListPHIDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1ListRxNormInferenceJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListRxNormInferenceJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListRxNormInferenceJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListRxNormInferenceJobsCommand = deserializeAws_json1_1ListRxNormInferenceJobsCommand;
const deserializeAws_json1_1ListRxNormInferenceJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSNOMEDCTInferenceJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommand;
const deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StartEntitiesDetectionV2JobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartEntitiesDetectionV2JobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartEntitiesDetectionV2JobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartEntitiesDetectionV2JobCommand = deserializeAws_json1_1StartEntitiesDetectionV2JobCommand;
const deserializeAws_json1_1StartEntitiesDetectionV2JobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StartICD10CMInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartICD10CMInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartICD10CMInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartICD10CMInferenceJobCommand = deserializeAws_json1_1StartICD10CMInferenceJobCommand;
const deserializeAws_json1_1StartICD10CMInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StartPHIDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartPHIDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartPHIDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartPHIDetectionJobCommand = deserializeAws_json1_1StartPHIDetectionJobCommand;
const deserializeAws_json1_1StartPHIDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StartRxNormInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartRxNormInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartRxNormInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartRxNormInferenceJobCommand = deserializeAws_json1_1StartRxNormInferenceJobCommand;
const deserializeAws_json1_1StartRxNormInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StartSNOMEDCTInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartSNOMEDCTInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartSNOMEDCTInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StartSNOMEDCTInferenceJobCommand = deserializeAws_json1_1StartSNOMEDCTInferenceJobCommand;
const deserializeAws_json1_1StartSNOMEDCTInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StopEntitiesDetectionV2JobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopEntitiesDetectionV2JobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopEntitiesDetectionV2JobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopEntitiesDetectionV2JobCommand = deserializeAws_json1_1StopEntitiesDetectionV2JobCommand;
const deserializeAws_json1_1StopEntitiesDetectionV2JobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StopICD10CMInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopICD10CMInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopICD10CMInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopICD10CMInferenceJobCommand = deserializeAws_json1_1StopICD10CMInferenceJobCommand;
const deserializeAws_json1_1StopICD10CMInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StopPHIDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopPHIDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopPHIDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopPHIDetectionJobCommand = deserializeAws_json1_1StopPHIDetectionJobCommand;
const deserializeAws_json1_1StopPHIDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StopRxNormInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopRxNormInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopRxNormInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopRxNormInferenceJobCommand = deserializeAws_json1_1StopRxNormInferenceJobCommand;
const deserializeAws_json1_1StopRxNormInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1StopSNOMEDCTInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopSNOMEDCTInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopSNOMEDCTInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_json1_1StopSNOMEDCTInferenceJobCommand = deserializeAws_json1_1StopSNOMEDCTInferenceJobCommand;
const deserializeAws_json1_1StopSNOMEDCTInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            const $metadata = deserializeMetadata(output);
            const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
            response = new ComprehendMedicalServiceException_1.ComprehendMedicalServiceException({
                name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                $fault: "client",
                $metadata,
            });
            throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
    }
};
const deserializeAws_json1_1InternalServerExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalServerException(body, context);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidEncodingExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidEncodingException(body, context);
    const exception = new models_0_1.InvalidEncodingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidRequestException(body, context);
    const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ServiceUnavailableExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
    const exception = new models_0_1.ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1TextSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TextSizeLimitExceededException(body, context);
    const exception = new models_0_1.TextSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ValidationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ValidationException(body, context);
    const exception = new models_0_1.ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_json1_1ComprehendMedicalAsyncJobFilter = (input, context) => {
    return {
        ...(input.JobName != null && { JobName: input.JobName }),
        ...(input.JobStatus != null && { JobStatus: input.JobStatus }),
        ...(input.SubmitTimeAfter != null && { SubmitTimeAfter: Math.round(input.SubmitTimeAfter.getTime() / 1000) }),
        ...(input.SubmitTimeBefore != null && { SubmitTimeBefore: Math.round(input.SubmitTimeBefore.getTime() / 1000) }),
    };
};
const serializeAws_json1_1DescribeEntitiesDetectionV2JobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1DescribeICD10CMInferenceJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1DescribePHIDetectionJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1DescribeRxNormInferenceJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1DescribeSNOMEDCTInferenceJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1DetectEntitiesRequest = (input, context) => {
    return {
        ...(input.Text != null && { Text: input.Text }),
    };
};
const serializeAws_json1_1DetectEntitiesV2Request = (input, context) => {
    return {
        ...(input.Text != null && { Text: input.Text }),
    };
};
const serializeAws_json1_1DetectPHIRequest = (input, context) => {
    return {
        ...(input.Text != null && { Text: input.Text }),
    };
};
const serializeAws_json1_1InferICD10CMRequest = (input, context) => {
    return {
        ...(input.Text != null && { Text: input.Text }),
    };
};
const serializeAws_json1_1InferRxNormRequest = (input, context) => {
    return {
        ...(input.Text != null && { Text: input.Text }),
    };
};
const serializeAws_json1_1InferSNOMEDCTRequest = (input, context) => {
    return {
        ...(input.Text != null && { Text: input.Text }),
    };
};
const serializeAws_json1_1InputDataConfig = (input, context) => {
    return {
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
    };
};
const serializeAws_json1_1ListEntitiesDetectionV2JobsRequest = (input, context) => {
    return {
        ...(input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListICD10CMInferenceJobsRequest = (input, context) => {
    return {
        ...(input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListPHIDetectionJobsRequest = (input, context) => {
    return {
        ...(input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListRxNormInferenceJobsRequest = (input, context) => {
    return {
        ...(input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1ListSNOMEDCTInferenceJobsRequest = (input, context) => {
    return {
        ...(input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) }),
        ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
        ...(input.NextToken != null && { NextToken: input.NextToken }),
    };
};
const serializeAws_json1_1OutputDataConfig = (input, context) => {
    return {
        ...(input.S3Bucket != null && { S3Bucket: input.S3Bucket }),
        ...(input.S3Key != null && { S3Key: input.S3Key }),
    };
};
const serializeAws_json1_1StartEntitiesDetectionV2JobRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn }),
        ...(input.InputDataConfig != null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.JobName != null && { JobName: input.JobName }),
        ...(input.KMSKey != null && { KMSKey: input.KMSKey }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.OutputDataConfig != null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
    };
};
const serializeAws_json1_1StartICD10CMInferenceJobRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn }),
        ...(input.InputDataConfig != null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.JobName != null && { JobName: input.JobName }),
        ...(input.KMSKey != null && { KMSKey: input.KMSKey }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.OutputDataConfig != null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
    };
};
const serializeAws_json1_1StartPHIDetectionJobRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn }),
        ...(input.InputDataConfig != null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.JobName != null && { JobName: input.JobName }),
        ...(input.KMSKey != null && { KMSKey: input.KMSKey }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.OutputDataConfig != null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
    };
};
const serializeAws_json1_1StartRxNormInferenceJobRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn }),
        ...(input.InputDataConfig != null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.JobName != null && { JobName: input.JobName }),
        ...(input.KMSKey != null && { KMSKey: input.KMSKey }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.OutputDataConfig != null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
    };
};
const serializeAws_json1_1StartSNOMEDCTInferenceJobRequest = (input, context) => {
    var _a;
    return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...(input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn }),
        ...(input.InputDataConfig != null && {
            InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
        }),
        ...(input.JobName != null && { JobName: input.JobName }),
        ...(input.KMSKey != null && { KMSKey: input.KMSKey }),
        ...(input.LanguageCode != null && { LanguageCode: input.LanguageCode }),
        ...(input.OutputDataConfig != null && {
            OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
        }),
    };
};
const serializeAws_json1_1StopEntitiesDetectionV2JobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1StopICD10CMInferenceJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1StopPHIDetectionJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1StopRxNormInferenceJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const serializeAws_json1_1StopSNOMEDCTInferenceJobRequest = (input, context) => {
    return {
        ...(input.JobId != null && { JobId: input.JobId }),
    };
};
const deserializeAws_json1_1Attribute = (output, context) => {
    return {
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        Category: (0, smithy_client_1.expectString)(output.Category),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        RelationshipScore: (0, smithy_client_1.limitedParseFloat32)(output.RelationshipScore),
        RelationshipType: (0, smithy_client_1.expectString)(output.RelationshipType),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1TraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1AttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Attribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Characters = (output, context) => {
    return {
        OriginalTextCharacters: (0, smithy_client_1.expectInt32)(output.OriginalTextCharacters),
    };
};
const deserializeAws_json1_1ComprehendMedicalAsyncJobProperties = (output, context) => {
    return {
        DataAccessRoleArn: (0, smithy_client_1.expectString)(output.DataAccessRoleArn),
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : undefined,
        ExpirationTime: output.ExpirationTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExpirationTime)))
            : undefined,
        InputDataConfig: output.InputDataConfig != null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        JobId: (0, smithy_client_1.expectString)(output.JobId),
        JobName: (0, smithy_client_1.expectString)(output.JobName),
        JobStatus: (0, smithy_client_1.expectString)(output.JobStatus),
        KMSKey: (0, smithy_client_1.expectString)(output.KMSKey),
        LanguageCode: (0, smithy_client_1.expectString)(output.LanguageCode),
        ManifestFilePath: (0, smithy_client_1.expectString)(output.ManifestFilePath),
        Message: (0, smithy_client_1.expectString)(output.Message),
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        OutputDataConfig: output.OutputDataConfig != null
            ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
            : undefined,
        SubmitTime: output.SubmitTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.SubmitTime))) : undefined,
    };
};
const deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1DescribeEntitiesDetectionV2JobResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeICD10CMInferenceJobResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribePHIDetectionJobResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeRxNormInferenceJobResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
const deserializeAws_json1_1DescribeSNOMEDCTInferenceJobResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
const deserializeAws_json1_1DetectEntitiesResponse = (output, context) => {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1EntityList(output.Entities, context) : undefined,
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        PaginationToken: (0, smithy_client_1.expectString)(output.PaginationToken),
        UnmappedAttributes: output.UnmappedAttributes != null
            ? deserializeAws_json1_1UnmappedAttributeList(output.UnmappedAttributes, context)
            : undefined,
    };
};
const deserializeAws_json1_1DetectEntitiesV2Response = (output, context) => {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1EntityList(output.Entities, context) : undefined,
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        PaginationToken: (0, smithy_client_1.expectString)(output.PaginationToken),
        UnmappedAttributes: output.UnmappedAttributes != null
            ? deserializeAws_json1_1UnmappedAttributeList(output.UnmappedAttributes, context)
            : undefined,
    };
};
const deserializeAws_json1_1DetectPHIResponse = (output, context) => {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1EntityList(output.Entities, context) : undefined,
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        PaginationToken: (0, smithy_client_1.expectString)(output.PaginationToken),
    };
};
const deserializeAws_json1_1Entity = (output, context) => {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1AttributeList(output.Attributes, context) : undefined,
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        Category: (0, smithy_client_1.expectString)(output.Category),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1TraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1EntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Entity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ICD10CMAttribute = (output, context) => {
    return {
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        Category: (0, smithy_client_1.expectString)(output.Category),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        RelationshipScore: (0, smithy_client_1.limitedParseFloat32)(output.RelationshipScore),
        RelationshipType: (0, smithy_client_1.expectString)(output.RelationshipType),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1ICD10CMTraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1ICD10CMAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMAttribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ICD10CMConcept = (output, context) => {
    return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
    };
};
const deserializeAws_json1_1ICD10CMConceptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMConcept(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ICD10CMEntity = (output, context) => {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1ICD10CMAttributeList(output.Attributes, context) : undefined,
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        Category: (0, smithy_client_1.expectString)(output.Category),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        ICD10CMConcepts: output.ICD10CMConcepts != null
            ? deserializeAws_json1_1ICD10CMConceptList(output.ICD10CMConcepts, context)
            : undefined,
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1ICD10CMTraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1ICD10CMEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMEntity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ICD10CMTrait = (output, context) => {
    return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
    };
};
const deserializeAws_json1_1ICD10CMTraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMTrait(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1InferICD10CMResponse = (output, context) => {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1ICD10CMEntityList(output.Entities, context) : undefined,
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        PaginationToken: (0, smithy_client_1.expectString)(output.PaginationToken),
    };
};
const deserializeAws_json1_1InferRxNormResponse = (output, context) => {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1RxNormEntityList(output.Entities, context) : undefined,
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        PaginationToken: (0, smithy_client_1.expectString)(output.PaginationToken),
    };
};
const deserializeAws_json1_1InferSNOMEDCTResponse = (output, context) => {
    return {
        Characters: output.Characters != null ? deserializeAws_json1_1Characters(output.Characters, context) : undefined,
        Entities: output.Entities != null ? deserializeAws_json1_1SNOMEDCTEntityList(output.Entities, context) : undefined,
        ModelVersion: (0, smithy_client_1.expectString)(output.ModelVersion),
        PaginationToken: (0, smithy_client_1.expectString)(output.PaginationToken),
        SNOMEDCTDetails: output.SNOMEDCTDetails != null
            ? deserializeAws_json1_1SNOMEDCTDetails(output.SNOMEDCTDetails, context)
            : undefined,
    };
};
const deserializeAws_json1_1InputDataConfig = (output, context) => {
    return {
        S3Bucket: (0, smithy_client_1.expectString)(output.S3Bucket),
        S3Key: (0, smithy_client_1.expectString)(output.S3Key),
    };
};
const deserializeAws_json1_1InternalServerException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1InvalidEncodingException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1InvalidRequestException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1ListEntitiesDetectionV2JobsResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListICD10CMInferenceJobsResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListPHIDetectionJobsResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListRxNormInferenceJobsResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1ListSNOMEDCTInferenceJobsResponse = (output, context) => {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
    };
};
const deserializeAws_json1_1OutputDataConfig = (output, context) => {
    return {
        S3Bucket: (0, smithy_client_1.expectString)(output.S3Bucket),
        S3Key: (0, smithy_client_1.expectString)(output.S3Key),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1RxNormAttribute = (output, context) => {
    return {
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        RelationshipScore: (0, smithy_client_1.limitedParseFloat32)(output.RelationshipScore),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1RxNormTraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1RxNormAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormAttribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RxNormConcept = (output, context) => {
    return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
    };
};
const deserializeAws_json1_1RxNormConceptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormConcept(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RxNormEntity = (output, context) => {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1RxNormAttributeList(output.Attributes, context) : undefined,
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        Category: (0, smithy_client_1.expectString)(output.Category),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        RxNormConcepts: output.RxNormConcepts != null
            ? deserializeAws_json1_1RxNormConceptList(output.RxNormConcepts, context)
            : undefined,
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1RxNormTraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1RxNormEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormEntity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1RxNormTrait = (output, context) => {
    return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
    };
};
const deserializeAws_json1_1RxNormTraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormTrait(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ServiceUnavailableException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1SNOMEDCTAttribute = (output, context) => {
    return {
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        Category: (0, smithy_client_1.expectString)(output.Category),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        RelationshipScore: (0, smithy_client_1.limitedParseFloat32)(output.RelationshipScore),
        RelationshipType: (0, smithy_client_1.expectString)(output.RelationshipType),
        SNOMEDCTConcepts: output.SNOMEDCTConcepts != null
            ? deserializeAws_json1_1SNOMEDCTConceptList(output.SNOMEDCTConcepts, context)
            : undefined,
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1SNOMEDCTTraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1SNOMEDCTAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTAttribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SNOMEDCTConcept = (output, context) => {
    return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Description: (0, smithy_client_1.expectString)(output.Description),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
    };
};
const deserializeAws_json1_1SNOMEDCTConceptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTConcept(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SNOMEDCTDetails = (output, context) => {
    return {
        Edition: (0, smithy_client_1.expectString)(output.Edition),
        Language: (0, smithy_client_1.expectString)(output.Language),
        VersionDate: (0, smithy_client_1.expectString)(output.VersionDate),
    };
};
const deserializeAws_json1_1SNOMEDCTEntity = (output, context) => {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1SNOMEDCTAttributeList(output.Attributes, context) : undefined,
        BeginOffset: (0, smithy_client_1.expectInt32)(output.BeginOffset),
        Category: (0, smithy_client_1.expectString)(output.Category),
        EndOffset: (0, smithy_client_1.expectInt32)(output.EndOffset),
        Id: (0, smithy_client_1.expectInt32)(output.Id),
        SNOMEDCTConcepts: output.SNOMEDCTConcepts != null
            ? deserializeAws_json1_1SNOMEDCTConceptList(output.SNOMEDCTConcepts, context)
            : undefined,
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
        Text: (0, smithy_client_1.expectString)(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1SNOMEDCTTraitList(output.Traits, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1SNOMEDCTEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTEntity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1SNOMEDCTTrait = (output, context) => {
    return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
    };
};
const deserializeAws_json1_1SNOMEDCTTraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTTrait(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1StartEntitiesDetectionV2JobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StartICD10CMInferenceJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StartPHIDetectionJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StartRxNormInferenceJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StartSNOMEDCTInferenceJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StopEntitiesDetectionV2JobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StopICD10CMInferenceJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StopPHIDetectionJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StopRxNormInferenceJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1StopSNOMEDCTInferenceJobResponse = (output, context) => {
    return {
        JobId: (0, smithy_client_1.expectString)(output.JobId),
    };
};
const deserializeAws_json1_1TextSizeLimitExceededException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1TooManyRequestsException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeAws_json1_1Trait = (output, context) => {
    return {
        Name: (0, smithy_client_1.expectString)(output.Name),
        Score: (0, smithy_client_1.limitedParseFloat32)(output.Score),
    };
};
const deserializeAws_json1_1TraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Trait(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UnmappedAttribute = (output, context) => {
    return {
        Attribute: output.Attribute != null ? deserializeAws_json1_1Attribute(output.Attribute, context) : undefined,
        Type: (0, smithy_client_1.expectString)(output.Type),
    };
};
const deserializeAws_json1_1UnmappedAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UnmappedAttribute(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ValidationException = (output, context) => {
    return {
        Message: (0, smithy_client_1.expectString)(output.Message),
    };
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};

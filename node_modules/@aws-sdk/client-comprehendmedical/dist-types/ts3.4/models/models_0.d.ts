import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { ComprehendMedicalServiceException as __BaseException } from "./ComprehendMedicalServiceException";
export declare enum EntityType {
    ANATOMY = "ANATOMY",
    MEDICAL_CONDITION = "MEDICAL_CONDITION",
    MEDICATION = "MEDICATION",
    PROTECTED_HEALTH_INFORMATION = "PROTECTED_HEALTH_INFORMATION",
    TEST_TREATMENT_PROCEDURE = "TEST_TREATMENT_PROCEDURE",
    TIME_EXPRESSION = "TIME_EXPRESSION"
}
export declare enum RelationshipType {
    ACUITY = "ACUITY",
    ADMINISTERED_VIA = "ADMINISTERED_VIA",
    DIRECTION = "DIRECTION",
    DOSAGE = "DOSAGE",
    DURATION = "DURATION",
    EVERY = "EVERY",
    FOR = "FOR",
    FORM = "FORM",
    FREQUENCY = "FREQUENCY",
    NEGATIVE = "NEGATIVE",
    OVERLAP = "OVERLAP",
    RATE = "RATE",
    ROUTE_OR_MODE = "ROUTE_OR_MODE",
    STRENGTH = "STRENGTH",
    SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
    TEST_UNIT = "TEST_UNIT",
    TEST_UNITS = "TEST_UNITS",
    TEST_VALUE = "TEST_VALUE",
    WITH_DOSAGE = "WITH_DOSAGE"
}
export declare enum AttributeName {
    DIAGNOSIS = "DIAGNOSIS",
    NEGATION = "NEGATION",
    SIGN = "SIGN",
    SYMPTOM = "SYMPTOM"
}

export interface Trait {
    
    Name?: AttributeName | string;
    
    Score?: number;
}
export declare namespace Trait {
    
    const filterSensitiveLog: (obj: Trait) => any;
}
export declare enum EntitySubType {
    ACUITY = "ACUITY",
    ADDRESS = "ADDRESS",
    AGE = "AGE",
    BRAND_NAME = "BRAND_NAME",
    CONTACT_POINT = "CONTACT_POINT",
    DATE = "DATE",
    DIRECTION = "DIRECTION",
    DOSAGE = "DOSAGE",
    DURATION = "DURATION",
    DX_NAME = "DX_NAME",
    EMAIL = "EMAIL",
    FORM = "FORM",
    FREQUENCY = "FREQUENCY",
    GENERIC_NAME = "GENERIC_NAME",
    ID = "ID",
    IDENTIFIER = "IDENTIFIER",
    NAME = "NAME",
    PHONE_OR_FAX = "PHONE_OR_FAX",
    PROCEDURE_NAME = "PROCEDURE_NAME",
    PROFESSION = "PROFESSION",
    QUALITY = "QUALITY",
    QUANTITY = "QUANTITY",
    RATE = "RATE",
    ROUTE_OR_MODE = "ROUTE_OR_MODE",
    STRENGTH = "STRENGTH",
    SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
    TEST_NAME = "TEST_NAME",
    TEST_UNIT = "TEST_UNIT",
    TEST_UNITS = "TEST_UNITS",
    TEST_VALUE = "TEST_VALUE",
    TIME_EXPRESSION = "TIME_EXPRESSION",
    TIME_TO_DX_NAME = "TIME_TO_DX_NAME",
    TIME_TO_MEDICATION_NAME = "TIME_TO_MEDICATION_NAME",
    TIME_TO_PROCEDURE_NAME = "TIME_TO_PROCEDURE_NAME",
    TIME_TO_TEST_NAME = "TIME_TO_TEST_NAME",
    TIME_TO_TREATMENT_NAME = "TIME_TO_TREATMENT_NAME",
    TREATMENT_NAME = "TREATMENT_NAME",
    URL = "URL"
}

export interface Attribute {
    
    Type?: EntitySubType | string;
    
    Score?: number;
    
    RelationshipScore?: number;
    
    RelationshipType?: RelationshipType | string;
    
    Id?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Text?: string;
    
    Category?: EntityType | string;
    
    Traits?: Trait[];
}
export declare namespace Attribute {
    
    const filterSensitiveLog: (obj: Attribute) => any;
}

export interface Characters {
    
    OriginalTextCharacters?: number;
}
export declare namespace Characters {
    
    const filterSensitiveLog: (obj: Characters) => any;
}
export interface DescribeEntitiesDetectionV2JobRequest {
    
    JobId: string | undefined;
}
export declare namespace DescribeEntitiesDetectionV2JobRequest {
    
    const filterSensitiveLog: (obj: DescribeEntitiesDetectionV2JobRequest) => any;
}

export interface InputDataConfig {
    
    S3Bucket: string | undefined;
    
    S3Key?: string;
}
export declare namespace InputDataConfig {
    
    const filterSensitiveLog: (obj: InputDataConfig) => any;
}
export declare enum JobStatus {
    COMPLETED = "COMPLETED",
    FAILED = "FAILED",
    IN_PROGRESS = "IN_PROGRESS",
    PARTIAL_SUCCESS = "PARTIAL_SUCCESS",
    STOPPED = "STOPPED",
    STOP_REQUESTED = "STOP_REQUESTED",
    SUBMITTED = "SUBMITTED"
}
export declare enum LanguageCode {
    EN = "en"
}

export interface OutputDataConfig {
    
    S3Bucket: string | undefined;
    
    S3Key?: string;
}
export declare namespace OutputDataConfig {
    
    const filterSensitiveLog: (obj: OutputDataConfig) => any;
}

export interface ComprehendMedicalAsyncJobProperties {
    
    JobId?: string;
    
    JobName?: string;
    
    JobStatus?: JobStatus | string;
    
    Message?: string;
    
    SubmitTime?: Date;
    
    EndTime?: Date;
    
    ExpirationTime?: Date;
    
    InputDataConfig?: InputDataConfig;
    
    OutputDataConfig?: OutputDataConfig;
    
    LanguageCode?: LanguageCode | string;
    
    DataAccessRoleArn?: string;
    
    ManifestFilePath?: string;
    
    KMSKey?: string;
    
    ModelVersion?: string;
}
export declare namespace ComprehendMedicalAsyncJobProperties {
    
    const filterSensitiveLog: (obj: ComprehendMedicalAsyncJobProperties) => any;
}
export interface DescribeEntitiesDetectionV2JobResponse {
    
    ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
}
export declare namespace DescribeEntitiesDetectionV2JobResponse {
    
    const filterSensitiveLog: (obj: DescribeEntitiesDetectionV2JobResponse) => any;
}

export declare class InternalServerException extends __BaseException {
    readonly name: "InternalServerException";
    readonly $fault: "server";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
}

export declare class InvalidRequestException extends __BaseException {
    readonly name: "InvalidRequestException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
}

export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}

export declare class TooManyRequestsException extends __BaseException {
    readonly name: "TooManyRequestsException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
}
export interface DescribeICD10CMInferenceJobRequest {
    
    JobId: string | undefined;
}
export declare namespace DescribeICD10CMInferenceJobRequest {
    
    const filterSensitiveLog: (obj: DescribeICD10CMInferenceJobRequest) => any;
}
export interface DescribeICD10CMInferenceJobResponse {
    
    ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
}
export declare namespace DescribeICD10CMInferenceJobResponse {
    
    const filterSensitiveLog: (obj: DescribeICD10CMInferenceJobResponse) => any;
}
export interface DescribePHIDetectionJobRequest {
    
    JobId: string | undefined;
}
export declare namespace DescribePHIDetectionJobRequest {
    
    const filterSensitiveLog: (obj: DescribePHIDetectionJobRequest) => any;
}
export interface DescribePHIDetectionJobResponse {
    
    ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
}
export declare namespace DescribePHIDetectionJobResponse {
    
    const filterSensitiveLog: (obj: DescribePHIDetectionJobResponse) => any;
}
export interface DescribeRxNormInferenceJobRequest {
    
    JobId: string | undefined;
}
export declare namespace DescribeRxNormInferenceJobRequest {
    
    const filterSensitiveLog: (obj: DescribeRxNormInferenceJobRequest) => any;
}
export interface DescribeRxNormInferenceJobResponse {
    
    ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
}
export declare namespace DescribeRxNormInferenceJobResponse {
    
    const filterSensitiveLog: (obj: DescribeRxNormInferenceJobResponse) => any;
}
export interface DescribeSNOMEDCTInferenceJobRequest {
    
    JobId: string | undefined;
}
export declare namespace DescribeSNOMEDCTInferenceJobRequest {
    
    const filterSensitiveLog: (obj: DescribeSNOMEDCTInferenceJobRequest) => any;
}
export interface DescribeSNOMEDCTInferenceJobResponse {
    
    ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
}
export declare namespace DescribeSNOMEDCTInferenceJobResponse {
    
    const filterSensitiveLog: (obj: DescribeSNOMEDCTInferenceJobResponse) => any;
}
export interface DetectEntitiesRequest {
    
    Text: string | undefined;
}
export declare namespace DetectEntitiesRequest {
    
    const filterSensitiveLog: (obj: DetectEntitiesRequest) => any;
}

export interface Entity {
    
    Id?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Score?: number;
    
    Text?: string;
    
    Category?: EntityType | string;
    
    Type?: EntitySubType | string;
    
    Traits?: Trait[];
    
    Attributes?: Attribute[];
}
export declare namespace Entity {
    
    const filterSensitiveLog: (obj: Entity) => any;
}

export interface UnmappedAttribute {
    
    Type?: EntityType | string;
    
    Attribute?: Attribute;
}
export declare namespace UnmappedAttribute {
    
    const filterSensitiveLog: (obj: UnmappedAttribute) => any;
}
export interface DetectEntitiesResponse {
    
    Entities: Entity[] | undefined;
    
    UnmappedAttributes?: UnmappedAttribute[];
    
    PaginationToken?: string;
    
    ModelVersion: string | undefined;
}
export declare namespace DetectEntitiesResponse {
    
    const filterSensitiveLog: (obj: DetectEntitiesResponse) => any;
}

export declare class InvalidEncodingException extends __BaseException {
    readonly name: "InvalidEncodingException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<InvalidEncodingException, __BaseException>);
}

export declare class ServiceUnavailableException extends __BaseException {
    readonly name: "ServiceUnavailableException";
    readonly $fault: "server";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
}

export declare class TextSizeLimitExceededException extends __BaseException {
    readonly name: "TextSizeLimitExceededException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<TextSizeLimitExceededException, __BaseException>);
}
export interface DetectEntitiesV2Request {
    
    Text: string | undefined;
}
export declare namespace DetectEntitiesV2Request {
    
    const filterSensitiveLog: (obj: DetectEntitiesV2Request) => any;
}
export interface DetectEntitiesV2Response {
    
    Entities: Entity[] | undefined;
    
    UnmappedAttributes?: UnmappedAttribute[];
    
    PaginationToken?: string;
    
    ModelVersion: string | undefined;
}
export declare namespace DetectEntitiesV2Response {
    
    const filterSensitiveLog: (obj: DetectEntitiesV2Response) => any;
}
export interface DetectPHIRequest {
    
    Text: string | undefined;
}
export declare namespace DetectPHIRequest {
    
    const filterSensitiveLog: (obj: DetectPHIRequest) => any;
}
export interface DetectPHIResponse {
    
    Entities: Entity[] | undefined;
    
    PaginationToken?: string;
    
    ModelVersion: string | undefined;
}
export declare namespace DetectPHIResponse {
    
    const filterSensitiveLog: (obj: DetectPHIResponse) => any;
}
export interface InferICD10CMRequest {
    
    Text: string | undefined;
}
export declare namespace InferICD10CMRequest {
    
    const filterSensitiveLog: (obj: InferICD10CMRequest) => any;
}
export declare enum ICD10CMEntityType {
    DX_NAME = "DX_NAME",
    TIME_EXPRESSION = "TIME_EXPRESSION"
}
export declare enum ICD10CMRelationshipType {
    OVERLAP = "OVERLAP",
    SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE"
}
export declare enum ICD10CMTraitName {
    DIAGNOSIS = "DIAGNOSIS",
    NEGATION = "NEGATION",
    SIGN = "SIGN",
    SYMPTOM = "SYMPTOM"
}

export interface ICD10CMTrait {
    
    Name?: ICD10CMTraitName | string;
    
    Score?: number;
}
export declare namespace ICD10CMTrait {
    
    const filterSensitiveLog: (obj: ICD10CMTrait) => any;
}
export declare enum ICD10CMAttributeType {
    ACUITY = "ACUITY",
    DIRECTION = "DIRECTION",
    QUALITY = "QUALITY",
    QUANTITY = "QUANTITY",
    SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
    TIME_EXPRESSION = "TIME_EXPRESSION",
    TIME_TO_DX_NAME = "TIME_TO_DX_NAME"
}

export interface ICD10CMAttribute {
    
    Type?: ICD10CMAttributeType | string;
    
    Score?: number;
    
    RelationshipScore?: number;
    
    Id?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Text?: string;
    
    Traits?: ICD10CMTrait[];
    
    Category?: ICD10CMEntityType | string;
    
    RelationshipType?: ICD10CMRelationshipType | string;
}
export declare namespace ICD10CMAttribute {
    
    const filterSensitiveLog: (obj: ICD10CMAttribute) => any;
}
export declare enum ICD10CMEntityCategory {
    MEDICAL_CONDITION = "MEDICAL_CONDITION"
}

export interface ICD10CMConcept {
    
    Description?: string;
    
    Code?: string;
    
    Score?: number;
}
export declare namespace ICD10CMConcept {
    
    const filterSensitiveLog: (obj: ICD10CMConcept) => any;
}

export interface ICD10CMEntity {
    
    Id?: number;
    
    Text?: string;
    
    Category?: ICD10CMEntityCategory | string;
    
    Type?: ICD10CMEntityType | string;
    
    Score?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Attributes?: ICD10CMAttribute[];
    
    Traits?: ICD10CMTrait[];
    
    ICD10CMConcepts?: ICD10CMConcept[];
}
export declare namespace ICD10CMEntity {
    
    const filterSensitiveLog: (obj: ICD10CMEntity) => any;
}
export interface InferICD10CMResponse {
    
    Entities: ICD10CMEntity[] | undefined;
    
    PaginationToken?: string;
    
    ModelVersion?: string;
}
export declare namespace InferICD10CMResponse {
    
    const filterSensitiveLog: (obj: InferICD10CMResponse) => any;
}
export interface InferRxNormRequest {
    
    Text: string | undefined;
}
export declare namespace InferRxNormRequest {
    
    const filterSensitiveLog: (obj: InferRxNormRequest) => any;
}
export declare enum RxNormTraitName {
    NEGATION = "NEGATION"
}

export interface RxNormTrait {
    
    Name?: RxNormTraitName | string;
    
    Score?: number;
}
export declare namespace RxNormTrait {
    
    const filterSensitiveLog: (obj: RxNormTrait) => any;
}
export declare enum RxNormAttributeType {
    DOSAGE = "DOSAGE",
    DURATION = "DURATION",
    FORM = "FORM",
    FREQUENCY = "FREQUENCY",
    RATE = "RATE",
    ROUTE_OR_MODE = "ROUTE_OR_MODE",
    STRENGTH = "STRENGTH"
}

export interface RxNormAttribute {
    
    Type?: RxNormAttributeType | string;
    
    Score?: number;
    
    RelationshipScore?: number;
    
    Id?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Text?: string;
    
    Traits?: RxNormTrait[];
}
export declare namespace RxNormAttribute {
    
    const filterSensitiveLog: (obj: RxNormAttribute) => any;
}
export declare enum RxNormEntityCategory {
    MEDICATION = "MEDICATION"
}

export interface RxNormConcept {
    
    Description?: string;
    
    Code?: string;
    
    Score?: number;
}
export declare namespace RxNormConcept {
    
    const filterSensitiveLog: (obj: RxNormConcept) => any;
}
export declare enum RxNormEntityType {
    BRAND_NAME = "BRAND_NAME",
    GENERIC_NAME = "GENERIC_NAME"
}

export interface RxNormEntity {
    
    Id?: number;
    
    Text?: string;
    
    Category?: RxNormEntityCategory | string;
    
    Type?: RxNormEntityType | string;
    
    Score?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Attributes?: RxNormAttribute[];
    
    Traits?: RxNormTrait[];
    
    RxNormConcepts?: RxNormConcept[];
}
export declare namespace RxNormEntity {
    
    const filterSensitiveLog: (obj: RxNormEntity) => any;
}
export interface InferRxNormResponse {
    
    Entities: RxNormEntity[] | undefined;
    
    PaginationToken?: string;
    
    ModelVersion?: string;
}
export declare namespace InferRxNormResponse {
    
    const filterSensitiveLog: (obj: InferRxNormResponse) => any;
}
export interface InferSNOMEDCTRequest {
    
    Text: string | undefined;
}
export declare namespace InferSNOMEDCTRequest {
    
    const filterSensitiveLog: (obj: InferSNOMEDCTRequest) => any;
}
export declare enum SNOMEDCTEntityCategory {
    ANATOMY = "ANATOMY",
    MEDICAL_CONDITION = "MEDICAL_CONDITION",
    TEST_TREATMENT_PROCEDURE = "TEST_TREATMENT_PROCEDURE"
}
export declare enum SNOMEDCTRelationshipType {
    ACUITY = "ACUITY",
    DIRECTION = "DIRECTION",
    QUALITY = "QUALITY",
    SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
    TEST_UNITS = "TEST_UNITS",
    TEST_VALUE = "TEST_VALUE"
}

export interface SNOMEDCTConcept {
    
    Description?: string;
    
    Code?: string;
    
    Score?: number;
}
export declare namespace SNOMEDCTConcept {
    
    const filterSensitiveLog: (obj: SNOMEDCTConcept) => any;
}
export declare enum SNOMEDCTTraitName {
    DIAGNOSIS = "DIAGNOSIS",
    NEGATION = "NEGATION",
    SIGN = "SIGN",
    SYMPTOM = "SYMPTOM"
}

export interface SNOMEDCTTrait {
    
    Name?: SNOMEDCTTraitName | string;
    
    Score?: number;
}
export declare namespace SNOMEDCTTrait {
    
    const filterSensitiveLog: (obj: SNOMEDCTTrait) => any;
}
export declare enum SNOMEDCTAttributeType {
    ACUITY = "ACUITY",
    DIRECTION = "DIRECTION",
    QUALITY = "QUALITY",
    SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
    TEST_UNIT = "TEST_UNIT",
    TEST_VALUE = "TEST_VALUE"
}

export interface SNOMEDCTAttribute {
    
    Category?: SNOMEDCTEntityCategory | string;
    
    Type?: SNOMEDCTAttributeType | string;
    
    Score?: number;
    
    RelationshipScore?: number;
    
    RelationshipType?: SNOMEDCTRelationshipType | string;
    
    Id?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Text?: string;
    
    Traits?: SNOMEDCTTrait[];
    
    SNOMEDCTConcepts?: SNOMEDCTConcept[];
}
export declare namespace SNOMEDCTAttribute {
    
    const filterSensitiveLog: (obj: SNOMEDCTAttribute) => any;
}
export declare enum SNOMEDCTEntityType {
    DX_NAME = "DX_NAME",
    PROCEDURE_NAME = "PROCEDURE_NAME",
    TEST_NAME = "TEST_NAME",
    TREATMENT_NAME = "TREATMENT_NAME"
}

export interface SNOMEDCTEntity {
    
    Id?: number;
    
    Text?: string;
    
    Category?: SNOMEDCTEntityCategory | string;
    
    Type?: SNOMEDCTEntityType | string;
    
    Score?: number;
    
    BeginOffset?: number;
    
    EndOffset?: number;
    
    Attributes?: SNOMEDCTAttribute[];
    
    Traits?: SNOMEDCTTrait[];
    
    SNOMEDCTConcepts?: SNOMEDCTConcept[];
}
export declare namespace SNOMEDCTEntity {
    
    const filterSensitiveLog: (obj: SNOMEDCTEntity) => any;
}

export interface SNOMEDCTDetails {
    
    Edition?: string;
    
    Language?: string;
    
    VersionDate?: string;
}
export declare namespace SNOMEDCTDetails {
    
    const filterSensitiveLog: (obj: SNOMEDCTDetails) => any;
}
export interface InferSNOMEDCTResponse {
    
    Entities: SNOMEDCTEntity[] | undefined;
    
    PaginationToken?: string;
    
    ModelVersion?: string;
    
    SNOMEDCTDetails?: SNOMEDCTDetails;
    
    Characters?: Characters;
}
export declare namespace InferSNOMEDCTResponse {
    
    const filterSensitiveLog: (obj: InferSNOMEDCTResponse) => any;
}

export interface ComprehendMedicalAsyncJobFilter {
    
    JobName?: string;
    
    JobStatus?: JobStatus | string;
    
    SubmitTimeBefore?: Date;
    
    SubmitTimeAfter?: Date;
}
export declare namespace ComprehendMedicalAsyncJobFilter {
    
    const filterSensitiveLog: (obj: ComprehendMedicalAsyncJobFilter) => any;
}
export interface ListEntitiesDetectionV2JobsRequest {
    
    Filter?: ComprehendMedicalAsyncJobFilter;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListEntitiesDetectionV2JobsRequest {
    
    const filterSensitiveLog: (obj: ListEntitiesDetectionV2JobsRequest) => any;
}
export interface ListEntitiesDetectionV2JobsResponse {
    
    ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
    
    NextToken?: string;
}
export declare namespace ListEntitiesDetectionV2JobsResponse {
    
    const filterSensitiveLog: (obj: ListEntitiesDetectionV2JobsResponse) => any;
}

export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
export interface ListICD10CMInferenceJobsRequest {
    
    Filter?: ComprehendMedicalAsyncJobFilter;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListICD10CMInferenceJobsRequest {
    
    const filterSensitiveLog: (obj: ListICD10CMInferenceJobsRequest) => any;
}
export interface ListICD10CMInferenceJobsResponse {
    
    ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
    
    NextToken?: string;
}
export declare namespace ListICD10CMInferenceJobsResponse {
    
    const filterSensitiveLog: (obj: ListICD10CMInferenceJobsResponse) => any;
}
export interface ListPHIDetectionJobsRequest {
    
    Filter?: ComprehendMedicalAsyncJobFilter;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListPHIDetectionJobsRequest {
    
    const filterSensitiveLog: (obj: ListPHIDetectionJobsRequest) => any;
}
export interface ListPHIDetectionJobsResponse {
    
    ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
    
    NextToken?: string;
}
export declare namespace ListPHIDetectionJobsResponse {
    
    const filterSensitiveLog: (obj: ListPHIDetectionJobsResponse) => any;
}
export interface ListRxNormInferenceJobsRequest {
    
    Filter?: ComprehendMedicalAsyncJobFilter;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListRxNormInferenceJobsRequest {
    
    const filterSensitiveLog: (obj: ListRxNormInferenceJobsRequest) => any;
}
export interface ListRxNormInferenceJobsResponse {
    
    ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
    
    NextToken?: string;
}
export declare namespace ListRxNormInferenceJobsResponse {
    
    const filterSensitiveLog: (obj: ListRxNormInferenceJobsResponse) => any;
}
export interface ListSNOMEDCTInferenceJobsRequest {
    
    Filter?: ComprehendMedicalAsyncJobFilter;
    
    NextToken?: string;
    
    MaxResults?: number;
}
export declare namespace ListSNOMEDCTInferenceJobsRequest {
    
    const filterSensitiveLog: (obj: ListSNOMEDCTInferenceJobsRequest) => any;
}
export interface ListSNOMEDCTInferenceJobsResponse {
    
    ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
    
    NextToken?: string;
}
export declare namespace ListSNOMEDCTInferenceJobsResponse {
    
    const filterSensitiveLog: (obj: ListSNOMEDCTInferenceJobsResponse) => any;
}
export interface StartEntitiesDetectionV2JobRequest {
    
    InputDataConfig: InputDataConfig | undefined;
    
    OutputDataConfig: OutputDataConfig | undefined;
    
    DataAccessRoleArn: string | undefined;
    
    JobName?: string;
    
    ClientRequestToken?: string;
    
    KMSKey?: string;
    
    LanguageCode: LanguageCode | string | undefined;
}
export declare namespace StartEntitiesDetectionV2JobRequest {
    
    const filterSensitiveLog: (obj: StartEntitiesDetectionV2JobRequest) => any;
}
export interface StartEntitiesDetectionV2JobResponse {
    
    JobId?: string;
}
export declare namespace StartEntitiesDetectionV2JobResponse {
    
    const filterSensitiveLog: (obj: StartEntitiesDetectionV2JobResponse) => any;
}
export interface StartICD10CMInferenceJobRequest {
    
    InputDataConfig: InputDataConfig | undefined;
    
    OutputDataConfig: OutputDataConfig | undefined;
    
    DataAccessRoleArn: string | undefined;
    
    JobName?: string;
    
    ClientRequestToken?: string;
    
    KMSKey?: string;
    
    LanguageCode: LanguageCode | string | undefined;
}
export declare namespace StartICD10CMInferenceJobRequest {
    
    const filterSensitiveLog: (obj: StartICD10CMInferenceJobRequest) => any;
}
export interface StartICD10CMInferenceJobResponse {
    
    JobId?: string;
}
export declare namespace StartICD10CMInferenceJobResponse {
    
    const filterSensitiveLog: (obj: StartICD10CMInferenceJobResponse) => any;
}
export interface StartPHIDetectionJobRequest {
    
    InputDataConfig: InputDataConfig | undefined;
    
    OutputDataConfig: OutputDataConfig | undefined;
    
    DataAccessRoleArn: string | undefined;
    
    JobName?: string;
    
    ClientRequestToken?: string;
    
    KMSKey?: string;
    
    LanguageCode: LanguageCode | string | undefined;
}
export declare namespace StartPHIDetectionJobRequest {
    
    const filterSensitiveLog: (obj: StartPHIDetectionJobRequest) => any;
}
export interface StartPHIDetectionJobResponse {
    
    JobId?: string;
}
export declare namespace StartPHIDetectionJobResponse {
    
    const filterSensitiveLog: (obj: StartPHIDetectionJobResponse) => any;
}
export interface StartRxNormInferenceJobRequest {
    
    InputDataConfig: InputDataConfig | undefined;
    
    OutputDataConfig: OutputDataConfig | undefined;
    
    DataAccessRoleArn: string | undefined;
    
    JobName?: string;
    
    ClientRequestToken?: string;
    
    KMSKey?: string;
    
    LanguageCode: LanguageCode | string | undefined;
}
export declare namespace StartRxNormInferenceJobRequest {
    
    const filterSensitiveLog: (obj: StartRxNormInferenceJobRequest) => any;
}
export interface StartRxNormInferenceJobResponse {
    
    JobId?: string;
}
export declare namespace StartRxNormInferenceJobResponse {
    
    const filterSensitiveLog: (obj: StartRxNormInferenceJobResponse) => any;
}
export interface StartSNOMEDCTInferenceJobRequest {
    
    InputDataConfig: InputDataConfig | undefined;
    
    OutputDataConfig: OutputDataConfig | undefined;
    
    DataAccessRoleArn: string | undefined;
    
    JobName?: string;
    
    ClientRequestToken?: string;
    
    KMSKey?: string;
    
    LanguageCode: LanguageCode | string | undefined;
}
export declare namespace StartSNOMEDCTInferenceJobRequest {
    
    const filterSensitiveLog: (obj: StartSNOMEDCTInferenceJobRequest) => any;
}
export interface StartSNOMEDCTInferenceJobResponse {
    
    JobId?: string;
}
export declare namespace StartSNOMEDCTInferenceJobResponse {
    
    const filterSensitiveLog: (obj: StartSNOMEDCTInferenceJobResponse) => any;
}
export interface StopEntitiesDetectionV2JobRequest {
    
    JobId: string | undefined;
}
export declare namespace StopEntitiesDetectionV2JobRequest {
    
    const filterSensitiveLog: (obj: StopEntitiesDetectionV2JobRequest) => any;
}
export interface StopEntitiesDetectionV2JobResponse {
    
    JobId?: string;
}
export declare namespace StopEntitiesDetectionV2JobResponse {
    
    const filterSensitiveLog: (obj: StopEntitiesDetectionV2JobResponse) => any;
}
export interface StopICD10CMInferenceJobRequest {
    
    JobId: string | undefined;
}
export declare namespace StopICD10CMInferenceJobRequest {
    
    const filterSensitiveLog: (obj: StopICD10CMInferenceJobRequest) => any;
}
export interface StopICD10CMInferenceJobResponse {
    
    JobId?: string;
}
export declare namespace StopICD10CMInferenceJobResponse {
    
    const filterSensitiveLog: (obj: StopICD10CMInferenceJobResponse) => any;
}
export interface StopPHIDetectionJobRequest {
    
    JobId: string | undefined;
}
export declare namespace StopPHIDetectionJobRequest {
    
    const filterSensitiveLog: (obj: StopPHIDetectionJobRequest) => any;
}
export interface StopPHIDetectionJobResponse {
    
    JobId?: string;
}
export declare namespace StopPHIDetectionJobResponse {
    
    const filterSensitiveLog: (obj: StopPHIDetectionJobResponse) => any;
}
export interface StopRxNormInferenceJobRequest {
    
    JobId: string | undefined;
}
export declare namespace StopRxNormInferenceJobRequest {
    
    const filterSensitiveLog: (obj: StopRxNormInferenceJobRequest) => any;
}
export interface StopRxNormInferenceJobResponse {
    
    JobId?: string;
}
export declare namespace StopRxNormInferenceJobResponse {
    
    const filterSensitiveLog: (obj: StopRxNormInferenceJobResponse) => any;
}
export interface StopSNOMEDCTInferenceJobRequest {
    
    JobId: string | undefined;
}
export declare namespace StopSNOMEDCTInferenceJobRequest {
    
    const filterSensitiveLog: (obj: StopSNOMEDCTInferenceJobRequest) => any;
}
export interface StopSNOMEDCTInferenceJobResponse {
    
    JobId?: string;
}
export declare namespace StopSNOMEDCTInferenceJobResponse {
    
    const filterSensitiveLog: (obj: StopSNOMEDCTInferenceJobResponse) => any;
}

import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, } from "@aws-sdk/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ComprehendMedicalServiceException as __BaseException } from "../models/ComprehendMedicalServiceException";
import { InternalServerException, InvalidEncodingException, InvalidRequestException, ResourceNotFoundException, ServiceUnavailableException, TextSizeLimitExceededException, TooManyRequestsException, ValidationException, } from "../models/models_0";
export var serializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeEntitiesDetectionV2JobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribeICD10CMInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DescribeICD10CMInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeICD10CMInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribePHIDetectionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DescribePHIDetectionJob",
        };
        body = JSON.stringify(serializeAws_json1_1DescribePHIDetectionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribeRxNormInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DescribeRxNormInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeRxNormInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DescribeSNOMEDCTInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1DescribeSNOMEDCTInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DetectEntitiesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DetectEntities",
        };
        body = JSON.stringify(serializeAws_json1_1DetectEntitiesRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DetectEntitiesV2Command = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DetectEntitiesV2",
        };
        body = JSON.stringify(serializeAws_json1_1DetectEntitiesV2Request(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1DetectPHICommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.DetectPHI",
        };
        body = JSON.stringify(serializeAws_json1_1DetectPHIRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1InferICD10CMCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.InferICD10CM",
        };
        body = JSON.stringify(serializeAws_json1_1InferICD10CMRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1InferRxNormCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.InferRxNorm",
        };
        body = JSON.stringify(serializeAws_json1_1InferRxNormRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1InferSNOMEDCTCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.InferSNOMEDCT",
        };
        body = JSON.stringify(serializeAws_json1_1InferSNOMEDCTRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListEntitiesDetectionV2JobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListEntitiesDetectionV2JobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListICD10CMInferenceJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.ListICD10CMInferenceJobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListICD10CMInferenceJobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListPHIDetectionJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.ListPHIDetectionJobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListPHIDetectionJobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListRxNormInferenceJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.ListRxNormInferenceJobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListRxNormInferenceJobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.ListSNOMEDCTInferenceJobs",
        };
        body = JSON.stringify(serializeAws_json1_1ListSNOMEDCTInferenceJobsRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartEntitiesDetectionV2JobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StartEntitiesDetectionV2Job",
        };
        body = JSON.stringify(serializeAws_json1_1StartEntitiesDetectionV2JobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartICD10CMInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StartICD10CMInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1StartICD10CMInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartPHIDetectionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StartPHIDetectionJob",
        };
        body = JSON.stringify(serializeAws_json1_1StartPHIDetectionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartRxNormInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StartRxNormInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1StartRxNormInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StartSNOMEDCTInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StartSNOMEDCTInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1StartSNOMEDCTInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StopEntitiesDetectionV2JobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StopEntitiesDetectionV2Job",
        };
        body = JSON.stringify(serializeAws_json1_1StopEntitiesDetectionV2JobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StopICD10CMInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StopICD10CMInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1StopICD10CMInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StopPHIDetectionJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StopPHIDetectionJob",
        };
        body = JSON.stringify(serializeAws_json1_1StopPHIDetectionJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StopRxNormInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StopRxNormInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1StopRxNormInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var serializeAws_json1_1StopSNOMEDCTInferenceJobCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var headers, body;
    return __generator(this, function (_a) {
        headers = {
            "content-type": "application/x-amz-json-1.1",
            "x-amz-target": "ComprehendMedical_20181030.StopSNOMEDCTInferenceJob",
        };
        body = JSON.stringify(serializeAws_json1_1StopSNOMEDCTInferenceJobRequest(input, context));
        return [2, buildHttpRpcRequest(context, headers, "/", undefined, body)];
    });
}); };
export var deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeEntitiesDetectionV2JobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeEntitiesDetectionV2JobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1DescribeICD10CMInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribeICD10CMInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeICD10CMInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeICD10CMInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1DescribePHIDetectionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribePHIDetectionJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribePHIDetectionJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribePHIDetectionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1DescribeRxNormInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribeRxNormInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeRxNormInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeRxNormInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DescribeSNOMEDCTInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DescribeSNOMEDCTInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1DetectEntitiesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DetectEntitiesCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DetectEntitiesResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DetectEntitiesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidEncodingException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidEncodingException": return [3, 4];
                    case "InvalidRequestException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ServiceUnavailableException": return [3, 8];
                    case "TextSizeLimitExceededException": return [3, 10];
                    case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1DetectEntitiesV2Command = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DetectEntitiesV2CommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DetectEntitiesV2Response(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DetectEntitiesV2CommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidEncodingException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidEncodingException": return [3, 4];
                    case "InvalidRequestException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ServiceUnavailableException": return [3, 8];
                    case "TextSizeLimitExceededException": return [3, 10];
                    case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1DetectPHICommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1DetectPHICommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1DetectPHIResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1DetectPHICommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidEncodingException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidEncodingException": return [3, 4];
                    case "InvalidRequestException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ServiceUnavailableException": return [3, 8];
                    case "TextSizeLimitExceededException": return [3, 10];
                    case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1InferICD10CMCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1InferICD10CMCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1InferICD10CMResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1InferICD10CMCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidEncodingException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidEncodingException": return [3, 4];
                    case "InvalidRequestException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ServiceUnavailableException": return [3, 8];
                    case "TextSizeLimitExceededException": return [3, 10];
                    case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1InferRxNormCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1InferRxNormCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1InferRxNormResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1InferRxNormCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidEncodingException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidEncodingException": return [3, 4];
                    case "InvalidRequestException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ServiceUnavailableException": return [3, 8];
                    case "TextSizeLimitExceededException": return [3, 10];
                    case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1InferSNOMEDCTCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1InferSNOMEDCTCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1InferSNOMEDCTResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1InferSNOMEDCTCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidEncodingException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidEncodingException": return [3, 4];
                    case "InvalidRequestException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ServiceUnavailableException": return [3, 8];
                    case "TextSizeLimitExceededException": return [3, 10];
                    case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException": return [3, 10];
                    case "TooManyRequestsException": return [3, 12];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidEncodingExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_json1_1TextSizeLimitExceededExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1ListEntitiesDetectionV2JobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListEntitiesDetectionV2JobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListEntitiesDetectionV2JobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListEntitiesDetectionV2JobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 6];
                    case "ValidationException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ValidationException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1ListICD10CMInferenceJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListICD10CMInferenceJobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListICD10CMInferenceJobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListICD10CMInferenceJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 6];
                    case "ValidationException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ValidationException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1ListPHIDetectionJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListPHIDetectionJobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListPHIDetectionJobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListPHIDetectionJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 6];
                    case "ValidationException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ValidationException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1ListRxNormInferenceJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListRxNormInferenceJobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListRxNormInferenceJobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListRxNormInferenceJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 6];
                    case "ValidationException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ValidationException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1ListSNOMEDCTInferenceJobsResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1ListSNOMEDCTInferenceJobsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "TooManyRequestsException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 6];
                    case "ValidationException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#ValidationException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1ValidationExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StartEntitiesDetectionV2JobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartEntitiesDetectionV2JobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartEntitiesDetectionV2JobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartEntitiesDetectionV2JobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StartICD10CMInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartICD10CMInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartICD10CMInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartICD10CMInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StartPHIDetectionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartPHIDetectionJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartPHIDetectionJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartPHIDetectionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StartRxNormInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartRxNormInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartRxNormInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartRxNormInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StartSNOMEDCTInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StartSNOMEDCTInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StartSNOMEDCTInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StartSNOMEDCTInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StopEntitiesDetectionV2JobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StopEntitiesDetectionV2JobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StopEntitiesDetectionV2JobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StopEntitiesDetectionV2JobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StopICD10CMInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StopICD10CMInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StopICD10CMInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StopICD10CMInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StopPHIDetectionJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StopPHIDetectionJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StopPHIDetectionJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StopPHIDetectionJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StopRxNormInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StopRxNormInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StopRxNormInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StopRxNormInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                }
                return [3, 8];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_json1_1StopSNOMEDCTInferenceJobCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var data, contents, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode >= 300) {
                    return [2, deserializeAws_json1_1StopSNOMEDCTInferenceJobCommandError(output, context)];
                }
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                contents = {};
                contents = deserializeAws_json1_1StopSNOMEDCTInferenceJobResponse(data, context);
                response = __assign({ $metadata: deserializeMetadata(output) }, contents);
                return [2, Promise.resolve(response)];
        }
    });
}); };
var deserializeAws_json1_1StopSNOMEDCTInferenceJobCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "InternalServerException": return [3, 2];
                    case "com.amazonaws.comprehendmedical#InternalServerException": return [3, 2];
                    case "InvalidRequestException": return [3, 4];
                    case "com.amazonaws.comprehendmedical#InvalidRequestException": return [3, 4];
                    case "ResourceNotFoundException": return [3, 6];
                    case "com.amazonaws.comprehendmedical#ResourceNotFoundException": return [3, 6];
                    case "TooManyRequestsException": return [3, 8];
                    case "com.amazonaws.comprehendmedical#TooManyRequestsException": return [3, 8];
                }
                return [3, 10];
            case 2: return [4, deserializeAws_json1_1InternalServerExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_json1_1InvalidRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
var deserializeAws_json1_1InternalServerExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InternalServerException(body, context);
        exception = new InternalServerException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1InvalidEncodingExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidEncodingException(body, context);
        exception = new InvalidEncodingException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1InvalidRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1InvalidRequestException(body, context);
        exception = new InvalidRequestException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
        exception = new ResourceNotFoundException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1ServiceUnavailableExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ServiceUnavailableException(body, context);
        exception = new ServiceUnavailableException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1TextSizeLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TextSizeLimitExceededException(body, context);
        exception = new TextSizeLimitExceededException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
        exception = new TooManyRequestsException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var deserializeAws_json1_1ValidationExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var body, deserialized, exception;
    return __generator(this, function (_a) {
        body = parsedOutput.body;
        deserialized = deserializeAws_json1_1ValidationException(body, context);
        exception = new ValidationException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, deserialized));
        return [2, __decorateServiceException(exception, body)];
    });
}); };
var serializeAws_json1_1ComprehendMedicalAsyncJobFilter = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.JobName != null && { JobName: input.JobName })), (input.JobStatus != null && { JobStatus: input.JobStatus })), (input.SubmitTimeAfter != null && { SubmitTimeAfter: Math.round(input.SubmitTimeAfter.getTime() / 1000) })), (input.SubmitTimeBefore != null && { SubmitTimeBefore: Math.round(input.SubmitTimeBefore.getTime() / 1000) }));
};
var serializeAws_json1_1DescribeEntitiesDetectionV2JobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1DescribeICD10CMInferenceJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1DescribePHIDetectionJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1DescribeRxNormInferenceJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1DescribeSNOMEDCTInferenceJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1DetectEntitiesRequest = function (input, context) {
    return __assign({}, (input.Text != null && { Text: input.Text }));
};
var serializeAws_json1_1DetectEntitiesV2Request = function (input, context) {
    return __assign({}, (input.Text != null && { Text: input.Text }));
};
var serializeAws_json1_1DetectPHIRequest = function (input, context) {
    return __assign({}, (input.Text != null && { Text: input.Text }));
};
var serializeAws_json1_1InferICD10CMRequest = function (input, context) {
    return __assign({}, (input.Text != null && { Text: input.Text }));
};
var serializeAws_json1_1InferRxNormRequest = function (input, context) {
    return __assign({}, (input.Text != null && { Text: input.Text }));
};
var serializeAws_json1_1InferSNOMEDCTRequest = function (input, context) {
    return __assign({}, (input.Text != null && { Text: input.Text }));
};
var serializeAws_json1_1InputDataConfig = function (input, context) {
    return __assign(__assign({}, (input.S3Bucket != null && { S3Bucket: input.S3Bucket })), (input.S3Key != null && { S3Key: input.S3Key }));
};
var serializeAws_json1_1ListEntitiesDetectionV2JobsRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1ListICD10CMInferenceJobsRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1ListPHIDetectionJobsRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1ListRxNormInferenceJobsRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1ListSNOMEDCTInferenceJobsRequest = function (input, context) {
    return __assign(__assign(__assign({}, (input.Filter != null && { Filter: serializeAws_json1_1ComprehendMedicalAsyncJobFilter(input.Filter, context) })), (input.MaxResults != null && { MaxResults: input.MaxResults })), (input.NextToken != null && { NextToken: input.NextToken }));
};
var serializeAws_json1_1OutputDataConfig = function (input, context) {
    return __assign(__assign({}, (input.S3Bucket != null && { S3Bucket: input.S3Bucket })), (input.S3Key != null && { S3Key: input.S3Key }));
};
var serializeAws_json1_1StartEntitiesDetectionV2JobRequest = function (input, context) {
    var _a;
    return __assign(__assign(__assign(__assign(__assign(__assign({ ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }, (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn })), (input.InputDataConfig != null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
    })), (input.JobName != null && { JobName: input.JobName })), (input.KMSKey != null && { KMSKey: input.KMSKey })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.OutputDataConfig != null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
    }));
};
var serializeAws_json1_1StartICD10CMInferenceJobRequest = function (input, context) {
    var _a;
    return __assign(__assign(__assign(__assign(__assign(__assign({ ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }, (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn })), (input.InputDataConfig != null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
    })), (input.JobName != null && { JobName: input.JobName })), (input.KMSKey != null && { KMSKey: input.KMSKey })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.OutputDataConfig != null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
    }));
};
var serializeAws_json1_1StartPHIDetectionJobRequest = function (input, context) {
    var _a;
    return __assign(__assign(__assign(__assign(__assign(__assign({ ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }, (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn })), (input.InputDataConfig != null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
    })), (input.JobName != null && { JobName: input.JobName })), (input.KMSKey != null && { KMSKey: input.KMSKey })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.OutputDataConfig != null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
    }));
};
var serializeAws_json1_1StartRxNormInferenceJobRequest = function (input, context) {
    var _a;
    return __assign(__assign(__assign(__assign(__assign(__assign({ ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }, (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn })), (input.InputDataConfig != null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
    })), (input.JobName != null && { JobName: input.JobName })), (input.KMSKey != null && { KMSKey: input.KMSKey })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.OutputDataConfig != null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
    }));
};
var serializeAws_json1_1StartSNOMEDCTInferenceJobRequest = function (input, context) {
    var _a;
    return __assign(__assign(__assign(__assign(__assign(__assign({ ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : generateIdempotencyToken() }, (input.DataAccessRoleArn != null && { DataAccessRoleArn: input.DataAccessRoleArn })), (input.InputDataConfig != null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
    })), (input.JobName != null && { JobName: input.JobName })), (input.KMSKey != null && { KMSKey: input.KMSKey })), (input.LanguageCode != null && { LanguageCode: input.LanguageCode })), (input.OutputDataConfig != null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
    }));
};
var serializeAws_json1_1StopEntitiesDetectionV2JobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1StopICD10CMInferenceJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1StopPHIDetectionJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1StopRxNormInferenceJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var serializeAws_json1_1StopSNOMEDCTInferenceJobRequest = function (input, context) {
    return __assign({}, (input.JobId != null && { JobId: input.JobId }));
};
var deserializeAws_json1_1Attribute = function (output, context) {
    return {
        BeginOffset: __expectInt32(output.BeginOffset),
        Category: __expectString(output.Category),
        EndOffset: __expectInt32(output.EndOffset),
        Id: __expectInt32(output.Id),
        RelationshipScore: __limitedParseFloat32(output.RelationshipScore),
        RelationshipType: __expectString(output.RelationshipType),
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1TraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1AttributeList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Attribute(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1Characters = function (output, context) {
    return {
        OriginalTextCharacters: __expectInt32(output.OriginalTextCharacters),
    };
};
var deserializeAws_json1_1ComprehendMedicalAsyncJobProperties = function (output, context) {
    return {
        DataAccessRoleArn: __expectString(output.DataAccessRoleArn),
        EndTime: output.EndTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.EndTime))) : undefined,
        ExpirationTime: output.ExpirationTime != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ExpirationTime)))
            : undefined,
        InputDataConfig: output.InputDataConfig != null
            ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
            : undefined,
        JobId: __expectString(output.JobId),
        JobName: __expectString(output.JobName),
        JobStatus: __expectString(output.JobStatus),
        KMSKey: __expectString(output.KMSKey),
        LanguageCode: __expectString(output.LanguageCode),
        ManifestFilePath: __expectString(output.ManifestFilePath),
        Message: __expectString(output.Message),
        ModelVersion: __expectString(output.ModelVersion),
        OutputDataConfig: output.OutputDataConfig != null
            ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
            : undefined,
        SubmitTime: output.SubmitTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.SubmitTime))) : undefined,
    };
};
var deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1DescribeEntitiesDetectionV2JobResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1DescribeICD10CMInferenceJobResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1DescribePHIDetectionJobResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1DescribeRxNormInferenceJobResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1DescribeSNOMEDCTInferenceJobResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobProperties: output.ComprehendMedicalAsyncJobProperties != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobProperties(output.ComprehendMedicalAsyncJobProperties, context)
            : undefined,
    };
};
var deserializeAws_json1_1DetectEntitiesResponse = function (output, context) {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1EntityList(output.Entities, context) : undefined,
        ModelVersion: __expectString(output.ModelVersion),
        PaginationToken: __expectString(output.PaginationToken),
        UnmappedAttributes: output.UnmappedAttributes != null
            ? deserializeAws_json1_1UnmappedAttributeList(output.UnmappedAttributes, context)
            : undefined,
    };
};
var deserializeAws_json1_1DetectEntitiesV2Response = function (output, context) {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1EntityList(output.Entities, context) : undefined,
        ModelVersion: __expectString(output.ModelVersion),
        PaginationToken: __expectString(output.PaginationToken),
        UnmappedAttributes: output.UnmappedAttributes != null
            ? deserializeAws_json1_1UnmappedAttributeList(output.UnmappedAttributes, context)
            : undefined,
    };
};
var deserializeAws_json1_1DetectPHIResponse = function (output, context) {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1EntityList(output.Entities, context) : undefined,
        ModelVersion: __expectString(output.ModelVersion),
        PaginationToken: __expectString(output.PaginationToken),
    };
};
var deserializeAws_json1_1Entity = function (output, context) {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1AttributeList(output.Attributes, context) : undefined,
        BeginOffset: __expectInt32(output.BeginOffset),
        Category: __expectString(output.Category),
        EndOffset: __expectInt32(output.EndOffset),
        Id: __expectInt32(output.Id),
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1TraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1EntityList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Entity(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ICD10CMAttribute = function (output, context) {
    return {
        BeginOffset: __expectInt32(output.BeginOffset),
        Category: __expectString(output.Category),
        EndOffset: __expectInt32(output.EndOffset),
        Id: __expectInt32(output.Id),
        RelationshipScore: __limitedParseFloat32(output.RelationshipScore),
        RelationshipType: __expectString(output.RelationshipType),
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1ICD10CMTraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1ICD10CMAttributeList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMAttribute(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ICD10CMConcept = function (output, context) {
    return {
        Code: __expectString(output.Code),
        Description: __expectString(output.Description),
        Score: __limitedParseFloat32(output.Score),
    };
};
var deserializeAws_json1_1ICD10CMConceptList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMConcept(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ICD10CMEntity = function (output, context) {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1ICD10CMAttributeList(output.Attributes, context) : undefined,
        BeginOffset: __expectInt32(output.BeginOffset),
        Category: __expectString(output.Category),
        EndOffset: __expectInt32(output.EndOffset),
        ICD10CMConcepts: output.ICD10CMConcepts != null
            ? deserializeAws_json1_1ICD10CMConceptList(output.ICD10CMConcepts, context)
            : undefined,
        Id: __expectInt32(output.Id),
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1ICD10CMTraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1ICD10CMEntityList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMEntity(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ICD10CMTrait = function (output, context) {
    return {
        Name: __expectString(output.Name),
        Score: __limitedParseFloat32(output.Score),
    };
};
var deserializeAws_json1_1ICD10CMTraitList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ICD10CMTrait(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1InferICD10CMResponse = function (output, context) {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1ICD10CMEntityList(output.Entities, context) : undefined,
        ModelVersion: __expectString(output.ModelVersion),
        PaginationToken: __expectString(output.PaginationToken),
    };
};
var deserializeAws_json1_1InferRxNormResponse = function (output, context) {
    return {
        Entities: output.Entities != null ? deserializeAws_json1_1RxNormEntityList(output.Entities, context) : undefined,
        ModelVersion: __expectString(output.ModelVersion),
        PaginationToken: __expectString(output.PaginationToken),
    };
};
var deserializeAws_json1_1InferSNOMEDCTResponse = function (output, context) {
    return {
        Characters: output.Characters != null ? deserializeAws_json1_1Characters(output.Characters, context) : undefined,
        Entities: output.Entities != null ? deserializeAws_json1_1SNOMEDCTEntityList(output.Entities, context) : undefined,
        ModelVersion: __expectString(output.ModelVersion),
        PaginationToken: __expectString(output.PaginationToken),
        SNOMEDCTDetails: output.SNOMEDCTDetails != null
            ? deserializeAws_json1_1SNOMEDCTDetails(output.SNOMEDCTDetails, context)
            : undefined,
    };
};
var deserializeAws_json1_1InputDataConfig = function (output, context) {
    return {
        S3Bucket: __expectString(output.S3Bucket),
        S3Key: __expectString(output.S3Key),
    };
};
var deserializeAws_json1_1InternalServerException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1InvalidEncodingException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1InvalidRequestException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1ListEntitiesDetectionV2JobsResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1ListICD10CMInferenceJobsResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1ListPHIDetectionJobsResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1ListRxNormInferenceJobsResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1ListSNOMEDCTInferenceJobsResponse = function (output, context) {
    return {
        ComprehendMedicalAsyncJobPropertiesList: output.ComprehendMedicalAsyncJobPropertiesList != null
            ? deserializeAws_json1_1ComprehendMedicalAsyncJobPropertiesList(output.ComprehendMedicalAsyncJobPropertiesList, context)
            : undefined,
        NextToken: __expectString(output.NextToken),
    };
};
var deserializeAws_json1_1OutputDataConfig = function (output, context) {
    return {
        S3Bucket: __expectString(output.S3Bucket),
        S3Key: __expectString(output.S3Key),
    };
};
var deserializeAws_json1_1ResourceNotFoundException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1RxNormAttribute = function (output, context) {
    return {
        BeginOffset: __expectInt32(output.BeginOffset),
        EndOffset: __expectInt32(output.EndOffset),
        Id: __expectInt32(output.Id),
        RelationshipScore: __limitedParseFloat32(output.RelationshipScore),
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1RxNormTraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1RxNormAttributeList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormAttribute(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1RxNormConcept = function (output, context) {
    return {
        Code: __expectString(output.Code),
        Description: __expectString(output.Description),
        Score: __limitedParseFloat32(output.Score),
    };
};
var deserializeAws_json1_1RxNormConceptList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormConcept(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1RxNormEntity = function (output, context) {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1RxNormAttributeList(output.Attributes, context) : undefined,
        BeginOffset: __expectInt32(output.BeginOffset),
        Category: __expectString(output.Category),
        EndOffset: __expectInt32(output.EndOffset),
        Id: __expectInt32(output.Id),
        RxNormConcepts: output.RxNormConcepts != null
            ? deserializeAws_json1_1RxNormConceptList(output.RxNormConcepts, context)
            : undefined,
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1RxNormTraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1RxNormEntityList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormEntity(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1RxNormTrait = function (output, context) {
    return {
        Name: __expectString(output.Name),
        Score: __limitedParseFloat32(output.Score),
    };
};
var deserializeAws_json1_1RxNormTraitList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1RxNormTrait(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ServiceUnavailableException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1SNOMEDCTAttribute = function (output, context) {
    return {
        BeginOffset: __expectInt32(output.BeginOffset),
        Category: __expectString(output.Category),
        EndOffset: __expectInt32(output.EndOffset),
        Id: __expectInt32(output.Id),
        RelationshipScore: __limitedParseFloat32(output.RelationshipScore),
        RelationshipType: __expectString(output.RelationshipType),
        SNOMEDCTConcepts: output.SNOMEDCTConcepts != null
            ? deserializeAws_json1_1SNOMEDCTConceptList(output.SNOMEDCTConcepts, context)
            : undefined,
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1SNOMEDCTTraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1SNOMEDCTAttributeList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTAttribute(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1SNOMEDCTConcept = function (output, context) {
    return {
        Code: __expectString(output.Code),
        Description: __expectString(output.Description),
        Score: __limitedParseFloat32(output.Score),
    };
};
var deserializeAws_json1_1SNOMEDCTConceptList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTConcept(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1SNOMEDCTDetails = function (output, context) {
    return {
        Edition: __expectString(output.Edition),
        Language: __expectString(output.Language),
        VersionDate: __expectString(output.VersionDate),
    };
};
var deserializeAws_json1_1SNOMEDCTEntity = function (output, context) {
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_1SNOMEDCTAttributeList(output.Attributes, context) : undefined,
        BeginOffset: __expectInt32(output.BeginOffset),
        Category: __expectString(output.Category),
        EndOffset: __expectInt32(output.EndOffset),
        Id: __expectInt32(output.Id),
        SNOMEDCTConcepts: output.SNOMEDCTConcepts != null
            ? deserializeAws_json1_1SNOMEDCTConceptList(output.SNOMEDCTConcepts, context)
            : undefined,
        Score: __limitedParseFloat32(output.Score),
        Text: __expectString(output.Text),
        Traits: output.Traits != null ? deserializeAws_json1_1SNOMEDCTTraitList(output.Traits, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1SNOMEDCTEntityList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTEntity(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1SNOMEDCTTrait = function (output, context) {
    return {
        Name: __expectString(output.Name),
        Score: __limitedParseFloat32(output.Score),
    };
};
var deserializeAws_json1_1SNOMEDCTTraitList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SNOMEDCTTrait(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1StartEntitiesDetectionV2JobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StartICD10CMInferenceJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StartPHIDetectionJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StartRxNormInferenceJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StartSNOMEDCTInferenceJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StopEntitiesDetectionV2JobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StopICD10CMInferenceJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StopPHIDetectionJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StopRxNormInferenceJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1StopSNOMEDCTInferenceJobResponse = function (output, context) {
    return {
        JobId: __expectString(output.JobId),
    };
};
var deserializeAws_json1_1TextSizeLimitExceededException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1TooManyRequestsException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeAws_json1_1Trait = function (output, context) {
    return {
        Name: __expectString(output.Name),
        Score: __limitedParseFloat32(output.Score),
    };
};
var deserializeAws_json1_1TraitList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Trait(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1UnmappedAttribute = function (output, context) {
    return {
        Attribute: output.Attribute != null ? deserializeAws_json1_1Attribute(output.Attribute, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_json1_1UnmappedAttributeList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1UnmappedAttribute(entry, context);
    });
    return retVal;
};
var deserializeAws_json1_1ValidationException = function (output, context) {
    return {
        Message: __expectString(output.Message),
    };
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var buildHttpRpcRequest = function (context, headers, path, resolvedHostname, body) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, contents;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                contents = {
                    protocol: protocol,
                    hostname: hostname,
                    port: port,
                    method: "POST",
                    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
                    headers: headers,
                };
                if (resolvedHostname !== undefined) {
                    contents.hostname = resolvedHostname;
                }
                if (body !== undefined) {
                    contents.body = body;
                }
                return [2, new __HttpRequest(contents)];
        }
    });
}); };
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
